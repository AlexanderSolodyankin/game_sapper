import javax.swing.*;
import java.awt.*;

public class Game extends JFrame { // Создали класс и у наследуемся от класса JFrame

    /**
     * Действие №_2
     * Мы создали класс и у наследовались от нашей библиотеки теперь переходим к реализации
     * С начала мы напишем статичный метод в котором будем создавать объект нашего класса
     * после переходим к "Действию 3"=> находится в классе Game.java
     */

    public static void startGame(){ // точка активации нашей программы
        new Game ();
    }

    /**
     * Действие 3
     *  Создадим приватный конструктор в котором будем активировать параметры
     *  нашего объекта.
     *  Зададим в него параметр видимости и размера окна.
     *  Теперь перейдём во входную часть нашей программы (Туда где она запускается) в класс StartGame
     *  по адресу src/StartGame.java
     *  после переходим к "Действию 4" => находится в классе StartGame.java
     */

//    private Game(){ // Конструктор нашего класса
//        setVisible ( true ); // параметр видимости
//        setSize ( 500,500 ); // размер окна
//    }

    /**
     * Действие 5
     * Теперь добавим к нашему конструктору дополнительных параметров
     * Это: 1) Расположение окна при активации по центру экрана
     *      2) Отключение программы при закрытии окна
     *      3) Титульное имя окна
     *      4) Ограничение изменения размера окна
     *
     *      и запустим нашу программу для проверки
     *      после переходим к "Действию 6" => находится в классе Game.java
     */

//    private Game(){ // Конструктор нашего класса
//        setSize ( 500,500 );
//        setVisible ( true );
//        setLocationRelativeTo ( null );
//        setTitle ( "Sapper 0.0.1" );
//        setDefaultCloseOperation ( EXIT_ON_CLOSE );
//        setResizable ( false );
//    }

    /**
     * Действие 6
     * Наш конструктор переполнен параметрами давайте их перенесем в отдельный метод нашего класса.
     * Это позволит разделить код по разным его составляющим и проще ориентироваться в нашем коде.
     * Назовем наш метод createWindow данный метод у нас будет приватным для того что бы его ограничить
     * от возможного внешнего вмешательства.
     * Данный метод не буде принимать никаких данных
     * и перенесем все параметры которые мы реализовали в конструкторе в наш метод
     * и реализуем наш метод в конструкторе нашего объекта и запустим программу для проверки
     * после переходим к "Действию 7" => находится в классе Game.java
     */

//    private Game(){ // Конструктор нашего класса
//        createWindow ();
//        /*
//        Все должно работать
//         */
//    }

//    private void createWindow(){ // Метод с параметры создания окна нашей программы
//        setSize ( 500,500 );
//        setVisible ( true );
//        setLocationRelativeTo ( null );
//        setTitle ( "Sapper 0.0.1" );
//        setDefaultCloseOperation ( EXIT_ON_CLOSE );
//        setResizable ( false );
//    }

    /**
     * Действие 7
     *  Теперь из метода createWindow() мы удалим парамер размера окна так как мы будем передавать данный параметр
     *  при помощи другого объекта.
     *  Данный объект нужен будет для того что бы через него передавать другие объекты и изменять размер окна.
     *  Зададим через него тот же размер и проверим нашу программу на работа способность.
     *
     * Для создания нашего объекта мы будем использовать еще один класс из нашей библиотеки Swing.
     * Данный класс называет JPanel и мы переопределим наш объект при помощи анонимного класса.
     * Так как нам не нужно создавать полноценный класс можно воспользоваться анонимным классом это будет удобнее.
     * Для того что бы его создать правильнее было бы поместить параметр ближе к ночалу класса но поскольку это
     * учебное пособие я его создам ниже данного комментария.
     * В данном анонимном классе нам нужно переопределить его метод paintComponent() В себя данный метод принимает
     *  в качестве параметра тип данных Graphics это еще один класс из нашей библиотеки который отвечает за
     *  прорисовку внутри окна.
     *  Сделаем это внутри метода initPanel()
     * И создадим в нем линию для проверки работоспособности нашей программы.
     * после переходим к "Действию 8" => находится в классе Game.java
     */
//
//    private JPanel panel; // параметр нашего класса Game
//
//    private void initPanel() {
//         this.panel = new JPanel ( )// Создали анонимный класс
//         { // тело анонимного класса
//            @Override
//            protected void paintComponent(Graphics g) { // Переопределяем метод
//                super.paintComponent ( g ); // не трогаем
//                g.drawLine ( 0, 0, 500, 500 ); // Добавляем линию (Потом мы ее удалим)
//            }
//
//        };
//
//        panel.setPreferredSize ( new Dimension ( 500 , 500 )); // Задаем размер
//        add(panel); // Добавляем панель в наш объект игры
//
//        /**
//         * После создания нам нужно в методе createWindow() инициализировать метод упаковки pack()
//         * что бы наша игра приняла новые параметры.
//         *
//         */
//    }
//
//    private Game(){ // Конструктор нашего класса
//         initPanel (); // инициализация размера окна и объектов для прорисовки в нем
//        createWindow (); // Создание окна
//        /*
//        Все должно работать
//         */
//    }
//
//    private void createWindow(){ // Метод с параметры создания окна нашей программы
//
//        setVisible ( true ); // метод статуса видимости
//        setTitle ( "Sapper 0.0.1" ); // титульное названия нашей программы
//        setDefaultCloseOperation ( EXIT_ON_CLOSE ); // метод задающий параметр завершения программы при закрытии окна
//        setResizable ( false );// параметр который не позволяет изменять размер окна
//        pack (); // Упаковка должна находится перед определением местоположения
//        setLocationRelativeTo ( null ); // данный метод перенесли в конец инициализации для корректной работы программы
//    }

    /**
     * Действие 8
     *
     * Теперь давайте удалим нашу линию и начнем подготовку для передачи картинок в нашу игру.
     *  Примечание: Картинки уже определенны в папке проекта и обозначены как ресурсы!!!
     *  Для того чтобы добавить картинки в наш проект нужно скачать картинки или их сделать.
     *  Лично я вырезал картинки из картинок которые нашел через поисковик.
     *  Так что тут наверное вам нужно справится самим с этим делом ну или скачать их из данного репозитория.
     *  Поскольку картинки уже находятся в папке resource/img/
     *  то для вас нужно создать папку resource и пометить ее как ресурс проекта.
     *  Для того что бы сделать папку ресурсом проекта нужно на нее нажать ПКМ и из контекстного меню
     *  выбрать параметры "Mark Directory as => Resources Root".
     *
     *  Для начала создадим метод который будет нам возвращать наши картинки.
     *  Назовем данный метод getImage() и будет данный метод принимать строку
     *  (Строка нам нужна на будущее пока что она не нужна).
     *  и укажем адрес нашей картинки
     * после переходим к "Действию 9" => находится в классе Game.java
     */

//    private Image getImage(String nameImage){ // метод для рендеринга картинок
//        ImageIcon icon = new ImageIcon ( "resource/img/num1.png" ); // Вытащили нашу картинку для обработки в коде
//        return icon.getImage (); // возвращаем нашу картинку
//    }

    /**
     *  Действие 9
     * Теперь добавим нашу картинку в наше окно для этого нам понадобится ранее написанный метод
     * в котором мы рисовали линию в методе initPanel();
     * Запустим нашу программу дял проверки.
     * после переходим к "Действию 10" => находится в классе Game.java
     *
     */

//
//    private JPanel panel; // параметр нашего класса Game
//
//    private void initPanel() {
//         this.panel = new JPanel ( )// Создали анонимный класс
//         { // тело анонимного класса
//            @Override
//            protected void paintComponent(Graphics g) { // Переопределяем метод
//                super.paintComponent ( g ); // не трогаем
////                g.drawLine ( 0, 0, 500, 500 ); // Добавляем линию (Потом мы ее удалим)
//                g.drawImage ( getImage ( "" ),0,0, this );
//            }
//        };
//
//        panel.setPreferredSize ( new Dimension ( 500 , 500 )); // Задаем размер
//        add(panel); // Добавляем панель в наш объект игры
//    }
//    private Game(){ // Конструктор нашего класса
//         initPanel (); // инициализация размера окна и объектов для прорисовки в нем
//        createWindow (); // Создание окна
//        /*
//        Все должно работать
//         */
//    }
//
//    private void createWindow(){ // Метод с параметры создания окна нашей программы
//
//        setVisible ( true ); // метод статуса видимости
//        setTitle ( "Sapper 0.0.1" ); // титульное названия нашей программы
//        setDefaultCloseOperation ( EXIT_ON_CLOSE ); // метод задающий параметр завершения программы при закрытии окна
//        setResizable ( false );// параметр который не позволяет изменять размер окна
//        pack (); // Упаковка должна находится перед определением местоположения
//        setLocationRelativeTo ( null ); // данный метод перенесли в конец инициализации для корректной работы программы
//    }
//    private Image getImage(String nameImage){ // метод для рендеринга картинок
//        ImageIcon icon = new ImageIcon ( "resource/img/num1.png" ); // Вытащили нашу картинку для обработки в коде
//        return icon.getImage (); // возвращаем нашу картинку
//    }

    /**
     *  Действие 10
     *  Поскольку у нас все работает давайте поиграемся и разберемся для чего нам нужен аргумент в методе getImage().
     *  И попробуем загрузить еще несколько картинок за одно постараемся разобраться как работает сетка окна.
     *  И как будут располагаться в ней картинки в координатной сетке.
     *  Загрузим 6 картинок (У меня картинки имеют размер 50 пикселей на 50 пикселей).
     *  Для этого мы в качестве аргумента будем передавать имя картинки.
     *  Из чего следует нам нужно немного переделать наш метод getImage(String nameImage).
     *  И прописать в нем не большую логику что бы постоянно не передавать наш адрес картинки.
     *  При прорисовке наших картинок в методе  initPanel() мы передадим несколько картинок.
     *  Обратите внимание что в "g.drawImage ( getImage ( "num1" ),0,0, this );" я изменяю расположение картинок
     *  по координатной сетке по оси (Х = икс) и (Y = игрик) ровно на размер картинки то есь на 50 пикселей.
     *  Так как координатная сетка может ориентироваться только по пикселям по ним и будем ориентироваться.
     *  Что бы сдвинуть картинку по оси икс (влево) я к параметру всегда добавляю +50 пикселей
     *  Что бы сдвинуть картинку по оси игрик (вниз) я к параметру всегда добавляю +50 пикселей
     *  Обязательно поиграйтесь и попробуйте подвигать картинки по всей площади окна.
     *  Это нужно для того что бы вы поняли как ориентироваться для будущих изменений.
     * после переходим к "Действию 11" => находится в классе Game.java
     */
//
//
//
//    private JPanel panel; // параметр нашего класса Game
//
//    private void initPanel() {
//        this.panel = new JPanel ( )// Создали анонимный класс
//        { // тело анонимного класса
//            @Override
//            protected void paintComponent(Graphics g) { // Переопределяем метод
//                super.paintComponent ( g ); // не трогаем
////                g.drawLine ( 0, 0, 500, 500 ); // Добавляем линию (Потом мы ее удалим)
//                g.drawImage ( getImage ( "num1" ),0,0, this );
//                g.drawImage ( getImage ( "num2" ),50,0, this );
//                g.drawImage ( getImage ( "num3" ),100,0, this );
//                g.drawImage ( getImage ( "num4" ),0,50, this );
//                g.drawImage ( getImage ( "bomb" ),50,50, this );
//                g.drawImage ( getImage ( "flag" ),100,50, this );
//            }
//        };
//        panel.setPreferredSize ( new Dimension ( 500 , 500 )); // Задаем размер
//        add(panel); // Добавляем панель в наш объект игры
//    }
//
//    private Game(){ // Конструктор нашего класса
//        initPanel (); // инициализация размера окна и объектов для прорисовки в нем
//        createWindow (); // Создание окна
//        /*
//        Все должно работать
//         */
//    }
//
//    private void createWindow(){ // Метод с параметры создания окна нашей программы
//
//        setVisible ( true ); // метод статуса видимости
//        setTitle ( "Sapper 0.0.1" ); // титульное названия нашей программы
//        setDefaultCloseOperation ( EXIT_ON_CLOSE ); // метод задающий параметр завершения программы при закрытии окна
//        setResizable ( false );// параметр который не позволяет изменять размер окна
//        pack (); // Упаковка должна находится перед определением местоположения
//        setLocationRelativeTo ( null ); // данный метод перенесли в конец инициализации для корректной работы программы
//    }
//    private Image getImage(String nameImage){ // метод для рендеринга картинок
//        ImageIcon icon = new ImageIcon ( "resource/img/" + nameImage + ".png" ); // Вытащили нашу картинку для обработки в коде
//        return icon.getImage (); // возвращаем нашу картинку
//    }

    /**
     *  Действие 11
     *  На данном этапе поскольку мы поигрались и добавили картинки давайте теперь пересоздадим перечисление
     *  наших картинок что бы программа сама их вызывала и за одно сделаем так что бы она их видела как
     *  внутренние ресурсы и за одно ограничим размер нашего окна по количеству картинок.
     *
     *  И так сначала мы создадим перечисление всех картинок и попробуем заполнить ими все окно.
     *  На данном этапе будет немного лишняя логика нашей программы которую мы потом удалим это нужно нам что бы на будущее
     *  научится располагать картинки по координатной сетке нашего окна.
     *
     *  Для того что бы создать перечисление нам понадобится Enum объект давайте его создадим
     *  Находится наш Enum класс будет по адресу src/Swapper.java
     *       * после переходим к "Действию 11.1" => находится в классе Swapper.java
     */

    /**
     *  Действие 11.2
     *  На данном этапе при помощи перечисления мы заполним наше окно нашими картинками.
     *  ВНИМАНИЕ!!! сейчас будет лишняя логика что бы поиграться не забудьте потом ее удалить.
     *  Для этого нам понадобится цикл мы будем использовать цикл for что бы нарисовать окно
     *  в зависимости от количества картинок.
     *  Для этого наш анонимный класс panel перенесем в наш класс Game.java в качестве параметра и удалим его в методе
     *  initPanel() и зададим ему логику которая будет вкладывать в него все имеющиеся картинки для прорисовки.
     *  так же в данном методе зададим логику прорисовки окна которая будет зависеть от количества картинок.
     *  Поле создадим метод setImages() в котором переберем все наши элементы из нашего класса Swapper.java.
     *  И передаем их в виде картинок.
     *  после переходим к "Действию 11.3" => находится в классе Game.java
     */

//
//
//    private JPanel panel= new JPanel ( )// Создали анонимный класс
//    { // тело анонимного класса
//        @Override
//        protected void paintComponent(Graphics g) { // Переопределяем метод
//            super.paintComponent ( g ); // не трогаем
//            for (int i = 0 ; i < 8 * 50 ; i+=50) {
//                for (Swapper el : Swapper.values ( )) {
//                    g.drawImage ( (Image) el.image, el.ordinal ( ) * 50, i, this );
//                }
//            }
//        }
//    }; // параметр нашего класса Game
//
//    private void initPanel() {
//
//        panel.setPreferredSize ( new Dimension ( 8 * 50 , 8 * 50 )); // Задаем размер
//        add(panel); // Добавляем панель в наш объект игры
//    }
//
//    private Game(){ // Конструктор нашего класса
//        setImages ();
//        initPanel (); // инициализация размера окна и объектов для прорисовки в нем
//        createWindow (); // Создание окна
//        /*
//        Все должно работать
//         */
//    }
//
//    private void createWindow(){ // Метод с параметры создания окна нашей программы
//
//        setVisible ( true ); // метод статуса видимости
//        setTitle ( "Sapper 0.0.1" ); // титульное названия нашей программы
//        setDefaultCloseOperation ( EXIT_ON_CLOSE ); // метод задающий параметр завершения программы при закрытии окна
//        setResizable ( false );// параметр который не позволяет изменять размер окна
//        pack (); // Упаковка должна находится перед определением местоположения
//        setLocationRelativeTo ( null ); // данный метод перенесли в конец инициализации для корректной работы программы
//    }
//    private Image getImage(String nameImage){ // метод для рендеринга картинок
//        ImageIcon icon = new ImageIcon ( "resource/img/" + nameImage + ".png" ); // Вытащили нашу картинку для обработки в коде
//        return icon.getImage (); // возвращаем нашу картинку
//    }
//    private void setImages() {
//        for (Swapper box : Swapper.values ( )) {
//            /*
//            В данном цикле мы перебираем все параметры нашего класса Swapper.java
//            Но у него есть одна особенность он возвращает название всех картинок в верхнем регистре.
//            И по этому нам нужно их перевести в нижний регистр что мы и делаем при помощи функции toLowerCase().
//            Это свойство типа данных String и передаем данное значение в наш метод getImage() который и принимает данный
//            тип данных где мы уже подготовили логику по обращению к обращению к нашим картинкам.
//             */
//            box.image = getImage ( box.name ().toLowerCase( ));
//        }
//    }

/**
 *  Действие 11.3
 *  На данном этапе мы сделаем так что бы наша программа брала картинки не из папки а из ресурсной базы
 *  для этого нам нужно немного изменить наш метод  getImage().
 *  В нем мы изменим логику обращение к картинкам.
 *  Сейчас мы к картинкам обращаемся как к папке внутри нашего проекта но данный метод при компиляции
 *  нашей игры работать не будет и нужно сделать так что бы наши картинки были внутренним ресурсом нашего приложения.
 *  Для того чтобы изменить обращение нам нужно обратится к системе и через систему обратится к ресурсам.
 *  getClass() у нас будет обращаться к системе.
 * А его метод getResource() будет обращаться к внутренним ресурсам.
 * Ранее папку в которую мы поместили картинки мы определили как ресурсную к ней и будем обращаться.
 *  Если пропустили данный момент посмотрите Действие №_8.
 *  Теперь в нашем методе getImage в строчке где прописано ImageIcon icon = new ImageIcon ( "resource/img/" + nameImage + ".png" );
 *  мы пропишем следующее   ImageIcon icon = new ImageIcon ( getClass().getResource("/img/" + nameImage + ".png") );
 *  Откуда удалим обращение к папке resource и оставим все остальное.
 *  Запустим приложение для проверки работоспособности.
 *  Если вдруг выходит ошибка скорей всего у вас ошибка в классе Swapper.java где в параметрах имена отличаются от имен
 *  наших картинок.
 *  после переходим к "Действию 12" => находится в классе Game.java
 *
 */


private JPanel panel= new JPanel ( )// Создали анонимный класс
{ // тело анонимного класса
    @Override
    protected void paintComponent(Graphics g) { // Переопределяем метод
        super.paintComponent ( g ); // не трогаем
        for (int i = 0 ; i < 8 * 50 ; i+=50) {
            for (Swapper el : Swapper.values ( )) {
                g.drawImage ( (Image) el.image, el.ordinal ( ) * 50, i, this );
            }
        }
    }
}; // параметр нашего класса Game

    private void initPanel() {

        panel.setPreferredSize ( new Dimension ( 8 * 50 , 8 * 50 )); // Задаем размер
        add(panel); // Добавляем панель в наш объект игры
    }

    private Game(){ // Конструктор нашего класса
        setImages ();
        initPanel (); // инициализация размера окна и объектов для прорисовки в нем
        createWindow (); // Создание окна
        /*
        Все должно работать
         */
    }

    private void createWindow(){ // Метод с параметры создания окна нашей программы

        setVisible ( true ); // метод статуса видимости
        setTitle ( "Sapper 0.0.1" ); // титульное названия нашей программы
        setDefaultCloseOperation ( EXIT_ON_CLOSE ); // метод задающий параметр завершения программы при закрытии окна
        setResizable ( false );// параметр который не позволяет изменять размер окна
        pack (); // Упаковка должна находится перед определением местоположения
        setLocationRelativeTo ( null ); // данный метод перенесли в конец инициализации для корректной работы программы
    }
    private Image getImage(String nameImage){ // метод для рендеринга картинок
        ImageIcon icon = new ImageIcon ( getClass().getResource ( "/img/" + nameImage + ".png") ); // Вытащили нашу картинку для обработки в коде
        return icon.getImage (); // возвращаем нашу картинку
    }
    private void setImages() {
        for (Swapper box : Swapper.values ( )) {
            box.image = getImage ( box.name ().toLowerCase( ));
        }
    }

    /**
     * Действие 12
     * На данном этапе попробуем скомпилировать наш проект в .jar файл
     * Для этого нужно настроить нашу будущею программу.
     * Для настройки нашей программы в компиляторе нужно выбрать :
     * File => Project Structure =>  Artifacts => добавить артефакт.
     * Для создания Артефакта выбираем JAR => From modules width dependencies.
     * Должно выйти окно в котором мы заполняем параметры следующим образом:
     * В параметре модуля выбрать наш проект или его корневую папку (По умолчанию он уже должен стоять)
     * В параметре main Class выбрать класс от которого будет запускаться наша программа.
     * В нашем случае стартовая точка нашей программы находится в классе StartGame.java.
     *
     * После в нашем компиляторе нужно выбрать Build => Build artifacts => Build
     *
     * И в папке out появится новая папка artifacts/ Sapper.jar
     * Имя .jar файла зависит от названия проекта.
     *
     * Теперь переходим в эту папку и двойным кликом мыши запускаем наш скомпилированный проект.
     * И радуемся что мы смогли собрать наш проект НО это еще не наша игра
     * мы только подготовили все для того чтобы ее написать и довести до полноценной игры
     */



}
